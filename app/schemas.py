from pydantic import BaseModel, Field

class FrameInferenceInput(BaseModel):
    """The Request body 

    frame_number (int) : The frame number which is passed to the request
    batch_size (int) : The batch_size of the numpy array (in string format) which is passed to the result_body 
    image_width (int) : The width of the image
    image_height (int) : The height of the image
    results_body (str) : The body of the results, the format must be: "[[x,y,p], [x,y,p], [x,y,p] ...]" 
    """

    frame_number : int = Field(..., example=3, gt=-1, title="Frame number")
    batch_size : int = Field(..., example=16, gt=0, title="Batch size of results_body")
    image_width : int = Field(..., example=16, gt=0, title="Width of the image") 
    image_height : int = Field(..., example=16, gt=0, title="Height of the image")
    results_body : str = Field(..., example="[[x,y,p], [x,y,p], [x,y,p]]", title="Results generated by mediapipe")

# class FrameInferenceInputDev(BaseModel):
#     """
#     This will contain extra config along with the configs inside the FrameInferenceInput
#     """
#     hidden_features1 = Field(..., example=64, gt=0, title="Number of hidden features in the first layer")
#     hidden_features2 = Field(..., example=64, gt=0, title="Number of hidden features in the second layer")
#     ...


class FrameInferenceResults(BaseModel):
    """
    The ineference results provided by the model
    """
    frame_number : int = Field(..., example=3, gt=-1, title="Frame number") 
    batch_size : int = Field(..., example=16, gt=0, title="Batch size of results_body")
    image_width : int = Field(..., example=16, gt=0, title="Width of the image")
    image_height : int = Field(..., example=16, gt=0, title="Height of the image")

    downdog : float = Field(..., example=0.9, gt=-1, title="Probability of position DownDog")
    goddess : float = Field(..., example=0.9, gt=-1, title="Probability of position Goddess")
    plank : float = Field(..., example=0.9, gt=-1, title="Probability of position Plank")
    tree : float = Field(..., example=0.9, gt=-1, title="Probability of position Tree")
    warrior : float = Field(..., example=0.9, gt=-1, title="Probability of position Warrior")


class FrameInferenceResponse(BaseModel):
    """
    Output response of the model inference
    """

    status : int = Field(..., example=200, gt=0, title="Response status of the API")
    error : bool = Field(..., example=False, title='Is there any error in model inference')
    results : FrameInferenceResults = ...


class ErrorResponse(BaseModel):
    """
    Error response of the API
    """ 
    error : bool = Field(..., example=False, title='Is there any error in model inference')
    message : str = Field(..., example="", title="Error message")
    traceback : str = Field(None, example='', title='Detailed traceback of the error')